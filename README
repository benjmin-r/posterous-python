posterous.py
============
A very simple (and incomplete) wrapper around the posterous API
that's available at http://posterous.com/api
Currently (v0.1) only supports reading sites & posts

Sample usage:
>>> import posterous
>>> p = posterous.Posterous('username', 'password')
>>> sites = p.get_sites()
>>> for s in sites:
...   print s.name
...
testsite1
testsite2
testsite3
>>> posts = p.get_posts(sites[0].id)
>>> for p in posts:
...   print p.url
...
http://post.ly/1234
http://post.ly/2345
http://post.ly/3456
http://post.ly/4567
>>>


backup-posterous.py
=====================
A simple script that iterates over all your posterous sites and 
downloads all posts from all sites (including all media).
It's currently not very clever, and simply downlaods everything, and
employs no paging during API calls, so it might break with larger 
posterous sites.


user@host:~$ python backup-posterous.py --help
Usage: backup-posterous.py [options]

Options:
  -h, --help            show this help message and exit
  -u USERNAME, --username=USERNAME
                        Email address associated with posterous account
  -p PASSWORD, --password=PASSWORD
                        Password associated with posterous account
  -f FOLDER, --folder=FOLDER
                        Folder to store backup data in (Beware, if it 
                        exists, data may be overwritten)
  -s SITE_ID, --site-id=SITE_ID
                        Only query site with this id
  -d, --debug           Debug output
  -v, --verbose         Verbose output (overrides -d)
  -q, --quiet           Quiet output (overrides -v and -d)

  
  
Inside the given <folder> argument it creates a file/folder structure 
like the following:
  /{options.folder}
      /{site.hostname}
          {post-slug}.json  <-- body, comments & everything else
          {post-slug}_media{num}.{media_type}
